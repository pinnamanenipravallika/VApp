// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Microsoft.EntityFrameworkCore;
using Microsoft.Data.SqlClient;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;
using VApp.Entity;

namespace VApp.Entity
{
    public partial class VAContext
    {
        private VAContextProcedures _procedures;

        public VAContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new VAContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public VAContextProcedures GetProcedures()
        {
            return Procedures;
        }
    }

    public partial class VAContextProcedures
    {
        private readonly VAContext _context;

        public VAContextProcedures(VAContext context)
        {
            _context = context;
        }

        public virtual async Task<List<sp_empdashboardResult>> sp_empdashboardAsync(string EmployeeID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "EmployeeID",
                    Size = -1,
                    Value = EmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_empdashboardResult>("EXEC @returnValue = [dbo].[sp_empdashboard] @EmployeeID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_getAllDataResult>> sp_getAllDataAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_getAllDataResult>("EXEC @returnValue = [dbo].[sp_getAllData]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_insertFamilyAsync(string EmployeeID, string EmployeeName, string VaccineName, string DoseOne, string DoseTwo, DateTime? VaccinationDateOne, DateTime? VaccinationDateTwo, string CertificateOne, string CertificateTwo, string IsAffected, DateTime? AffectedDate, DateTime? RecoveryDate, string IsVaccinated, string Gender, DateTime? DOB, string Relationship, string PersonName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "EmployeeID",
                    Size = -1,
                    Value = EmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EmployeeName",
                    Size = -1,
                    Value = EmployeeName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "VaccineName",
                    Size = -1,
                    Value = VaccineName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DoseOne",
                    Size = 50,
                    Value = DoseOne ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DoseTwo",
                    Size = 50,
                    Value = DoseTwo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "VaccinationDateOne",
                    Value = VaccinationDateOne ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "VaccinationDateTwo",
                    Value = VaccinationDateTwo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "CertificateOne",
                    Size = -1,
                    Value = CertificateOne ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CertificateTwo",
                    Size = -1,
                    Value = CertificateTwo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IsAffected",
                    Size = 50,
                    Value = IsAffected ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AffectedDate",
                    Value = AffectedDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "RecoveryDate",
                    Value = RecoveryDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "IsVaccinated",
                    Size = 50,
                    Value = IsVaccinated ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Gender",
                    Size = -1,
                    Value = Gender ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DOB",
                    Value = DOB ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "Relationship",
                    Size = -1,
                    Value = Relationship ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PersonName",
                    Size = -1,
                    Value = PersonName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_insertFamily] @EmployeeID, @EmployeeName, @VaccineName, @DoseOne, @DoseTwo, @VaccinationDateOne, @VaccinationDateTwo, @CertificateOne, @CertificateTwo, @IsAffected, @AffectedDate, @RecoveryDate, @IsVaccinated, @Gender, @DOB, @Relationship, @PersonName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_insertVaccineAsync(string EmployeeID, string EmployeeName, string VaccineName, string DoseOne, string DoseTwo, DateTime? VaccinationDateOne, DateTime? VaccinationDateTwo, string CertificateOne, string CertificateTwo, string IsAffected, DateTime? AffectedDate, DateTime? RecoveryDate, int? RecoveryDuration, string IsVaccinated, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "EmployeeID",
                    Size = -1,
                    Value = EmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EmployeeName",
                    Size = -1,
                    Value = EmployeeName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "VaccineName",
                    Size = -1,
                    Value = VaccineName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DoseOne",
                    Size = 50,
                    Value = DoseOne ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DoseTwo",
                    Size = 50,
                    Value = DoseTwo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "VaccinationDateOne",
                    Value = VaccinationDateOne ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "VaccinationDateTwo",
                    Value = VaccinationDateTwo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "CertificateOne",
                    Size = -1,
                    Value = CertificateOne ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CertificateTwo",
                    Size = -1,
                    Value = CertificateTwo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IsAffected",
                    Size = 50,
                    Value = IsAffected ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AffectedDate",
                    Value = AffectedDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "RecoveryDate",
                    Value = RecoveryDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "RecoveryDuration",
                    Value = RecoveryDuration ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsVaccinated",
                    Size = 50,
                    Value = IsVaccinated ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_insertVaccine] @EmployeeID, @EmployeeName, @VaccineName, @DoseOne, @DoseTwo, @VaccinationDateOne, @VaccinationDateTwo, @CertificateOne, @CertificateTwo, @IsAffected, @AffectedDate, @RecoveryDate, @RecoveryDuration, @IsVaccinated", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_loginResult>> sp_loginAsync(string EmployeeId, string Password, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "EmployeeId",
                    Size = -1,
                    Value = EmployeeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Password",
                    Size = -1,
                    Value = Password ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_loginResult>("EXEC @returnValue = [dbo].[sp_login] @EmployeeId, @Password", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_searchResult>> sp_searchAsync(string EmployeeId, string EmployeeName, string CovidAffected, string IsVaccinated, string VaccineName, DateTime? VaccinationDateFrom, DateTime? vaccinationDateTo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "EmployeeId",
                    Size = 100,
                    Value = EmployeeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EmployeeName",
                    Size = -1,
                    Value = EmployeeName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CovidAffected",
                    Size = 50,
                    Value = CovidAffected ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IsVaccinated",
                    Size = 50,
                    Value = IsVaccinated ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "VaccineName",
                    Size = -1,
                    Value = VaccineName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "VaccinationDateFrom",
                    Value = VaccinationDateFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "vaccinationDateTo",
                    Value = vaccinationDateTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_searchResult>("EXEC @returnValue = [dbo].[sp_search] @EmployeeId, @EmployeeName, @CovidAffected, @IsVaccinated, @VaccineName, @VaccinationDateFrom, @vaccinationDateTo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_searchbyResult>> sp_searchbyAsync(string txtSearchBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "txtSearchBy",
                    Size = -1,
                    Value = txtSearchBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_searchbyResult>("EXEC @returnValue = [dbo].[sp_searchby] @txtSearchBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
